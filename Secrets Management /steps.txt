
helm repo add external-secrets https://charts.external-secrets.io

helm repo update

# Install the External Secrets Operator


helm install external-secrets \
  external-secrets/external-secrets \
  -n external-secrets \
  --create-namespace \
  --set installCRDs=true


# Verify the installation:
kubectl get pods -n external-secrets


# Connect to AWS Secrets Manager

# Create an IAM Policy for Secrets Access:
#create a file named sec.json with the following content:

{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Effect": "Allow",
      "Action": [
        "secretsmanager:GetSecretValue",
        "secretsmanager:DescribeSecret",
        "secretsmanager:ListSecrets"
      ],
      "Resource": "*"
    }
  ]
}

aws iam create-policy \
  --policy-name SecretsManagerReadPolicy \
  --policy-document file://sec.json

# Create a Kubernetes Secret with AWS Credentials:


kubectl create secret generic awssm-secret \
  -n external-secrets \
  --from-literal=access-key-id= ******************** \
  --from-literal=secret-access-key= *********************

#Create a SecretStore Resource:
#Create a file named aws-secret-store.yaml:
 

apiVersion: external-secrets.io/v1beta1
kind: SecretStore
metadata:
  name: aws-secret-store
  namespace: external-secrets
spec:
  provider:
    aws:
      service: SecretsManager
      region: us-west-2
      auth:
        secretRef:
          accessKeyIDSecretRef:
            name: awssm-secret
            key: access-key-id
          secretAccessKeySecretRef:
            name: awssm-secret
            key: secret-access-key


kubectl apply -f aws-secret-store.yaml



#Step 3: Automatically Sync Database and Redis Credentials
#For Database Credentials:
#Create an ExternalSecret resource for database credentials (db-external-secret.yaml):


apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: database-credentials
  namespace: <YOUR_APP_NAMESPACE>
spec:
  refreshInterval: 1h
  secretStoreRef:
    name: aws-secret-store
    kind: SecretStore
  target:
    name: database-secret
    creationPolicy: Owner
  data:
  - secretKey: username
    remoteRef:
      key: <AWS_SECRET_NAME_FOR_DB>
      property: username
  - secretKey: password
    remoteRef:
      key: <AWS_SECRET_NAME_FOR_DB>
      property: password


#For Redis Credentials:
#Create an ExternalSecret resource for Redis credentials (redis-external-secret.yaml):

yaml
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: redis-credentials
  namespace: <YOUR_APP_NAMESPACE>
spec:
  refreshInterval: 1h
  secretStoreRef:
    name: aws-secret-store
    kind: SecretStore
  target:
    name: redis-secret
    creationPolicy: Owner
  data:
  - secretKey: host
    remoteRef:
      key: <AWS_SECRET_NAME_FOR_REDIS>
      property: host
  - secretKey: port
    remoteRef:
      key: <AWS_SECRET_NAME_FOR_REDIS>
      property: port
  - secretKey: password
    remoteRef:
      key: <AWS_SECRET_NAME_FOR_REDIS>
      property: password
Apply both ExternalSecrets:




kubectl apply -f db-external-secret.yaml
kubectl apply -f redis-external-secret.yaml




#Check the created Kubernetes secrets:

kubectl get secrets -n <YOUR_APP_NAMESPACE>




#Check the status of ExternalSecrets:
kubectl get externalsecrets -n <YOUR_APP_NAMESPACE>



#Using the Secrets in Your Application
#reference these secrets in your deployments:

yaml
env:
  - name: DB_USERNAME
    valueFrom:
      secretKeyRef:
        name: database-secret
        key: username
  - name: DB_PASSWORD
    valueFrom:
      secretKeyRef:
        name: database-secret
        key: password